window.OffCliV = true;

window.Cheat = class Cheat {
    constructor(gameSourceUrl, { init, inputs, render }, methods) {

        window.cheat = this;

        this.init = init.bind(this);
        this.inputs = inputs.bind(this);
        this.render = render.bind(this);

        for (const fn in methods)
            this[fn] = methods[fn].bind(this);

        const gameSource = this.download(gameSourceUrl);
        
        hook(gameSource);
        this.defines();
        this.init();
    }

    static async build(...args) {
        await (() => {
            let done;
        
            const promise = new Promise(res => (done = res));
        
            const observer = new MutationObserver(() => {
                if (document.documentElement)
                    done();
            });
        
            observer.observe(document, { childList: true });
        
            return promise;
        })();

        new Cheat(...args);
    }

    download(url) {
        const request = new XMLHttpRequest();

        request.open("GET", url, false);
        request.send();

        return request.response;
    }

    defines() {
        this.isProxy = Symbol("isProxy");

        Object.defineProperties(Object.prototype, {
            canvas: {
                set(canvas) {
                    this._canvas = canvas;
                    if (canvas.id !== "game-overlay") return;

                    window.cheat.ctx = canvas.getContext("2d");

                    Object.defineProperties(this, {
                        render: {
                            set(val) {
                                this._render = new Proxy(val, {
                                    apply(_target, _that, args) {
                                        ["scale", "game", "controls", "renderer", "me"].forEach((name, index) => {
                                            window.cheat[name] = args[index];
                                        });

                                        Reflect.apply(...arguments);

                                        if (!window.cheat.me || !window.cheat.ctx) return;

                                        window.cheat.ctx.save();
                                        window.cheat.ctx.scale(window.cheat.scale, window.cheat.scale);
                                        window.cheat.render();
                                        window.cheat.ctx.restore();

                                        if (!window.cheat.me.procInputs[window.cheat.isProxy]) {
                                            window.cheat.me.procInputs = new Proxy(window.cheat.me.procInputs, {
                                                apply(_target, that, [input, game, recon, lock]) {
                                                    if (that) window.cheat.inputs(input);

                                                    return Reflect.apply(...arguments);
                                                },

                                                get(target, key) {
                                                    if (key === window.cheat.isProxy) return true;

                                                    return Reflect.get(target, key);
                                                }
                                            });
                                        }
                                    }
                                });
                            },

                            get() { return this._render }
                        }
                    });
                },

                get() { return this._canvas }
            },

            OBJLoader: {
                set(val) {
                    window.cheat.three = this;
                    this._value = val;
                },
                get() {
                    return this._value;
                },
            },
        });
    }

    // defaults
    inputs(input) { return input }
    render() { }
}

// "Socket Error" when this is a method of the Cheat class
function hook(gameSource) {
    let tokenPromiseResolve;
    const tokenPromise = new Promise((resolve) => (tokenPromiseResolve = resolve));

    const frame = document.createElement("iframe");

    frame.src = location.href;
    frame.style.display = "none";
    document.documentElement.append(frame);

    const iframeFetch = frame.contentWindow.fetch;

    frame.contentWindow.fetch = function (url) {
        if (typeof url === "string" && url.includes("/seek-game")) {
            frame.remove();
            tokenPromiseResolve(url);
            return;
        }

        return iframeFetch.apply(this, arguments);
    }

    const _fetch = window.fetch;

    window.fetch = async function (url, _args) {
        if (typeof url === "string" && url.includes("/seek-game")) {
            url = await tokenPromise;
        }

        return _fetch.apply(this, arguments);
    };

    const observer = new MutationObserver((mutationList) => {
        let isHooked = false;
        
        mutationList.forEach(mutation => {
            if (mutation.addedNodes) {
                for (const node of mutation.addedNodes) {
                    if (!isHooked && node.tagName === "SCRIPT" && node.innerHTML.includes("@license Krunker.io")) {
                        node.remove();
                        Function(gameSource)();
                        observer.disconnect();
                        isHooked = true;
                    }
                }
            }
        });
    });

    observer.observe(document, {
        childList: true,
        subtree: true,
    });
}

Cheat.build("https://krunker.zip/stable/source", {
    init() {
        this.settings = { 
            fovAimbot: true, 
            aimbotFov: 50,
            triggerbot: true,
            triggerbotFov: 20,
            triggerbotDelay: 25, // milliseconds
            smoothSpeed: 15
        };

        this.state = { canShoot: true, pressedKeys: new Set(), canDelayShot: true, delayedShots: [], isTriggerbotting: false };

        window.addEventListener("keydown", event => this.state.pressedKeys.add(event.key.toLowerCase()));
        window.addEventListener("keyup", event => this.state.pressedKeys.delete(event.key.toLowerCase()));

        // let adblocker = document.createElement("style");
        // adblocker.textContent = "#adCon, *[id*='aHider'] { display: none !important; }";
        // document.documentElement.append(adblocker);

        console.log("Cheat initialized!");
    },

    inputs(input) {
        const keyEnum = {
            frame: 0,
            delta: 1,
            xdir: 2,
            ydir: 3,
            moveDir: 4,
            shoot: 5,
            scope: 6,
            jump: 7,
            reload: 8,
            crouch: 9,
            weaponScroll: 10,
            weaponSwap: 11,
            moveLock: 12,
        };

        const width = innerWidth / this.scale;
        const height = innerHeight / this.scale;

        
        // auto jump (hold space to bhop)
        
        if (this.state.pressedKeys.has(" ")) {
            this.controls.keys[this.controls.binds.jump.val] ^= 1;
            
            if (this.controls.keys[this.controls.binds.jump.val])
            this.controls.didPressed[this.controls.binds.jump.val] = 1;
        }
        
        // fov aimbot
        
        this.controls.target = null;

        if (input[keyEnum.scope] || this.me.weapon.noAim) {
            // handle any delayed shots
            for (const shotTime of this.state.delayedShots) {
                if (performance.now() - shotTime > this.settings.triggerbotDelay) {
                    this.state.isTriggerbotting = true;

                    this.state.delayedShots.shift();

                    break;
                }
            }

            if (this.state.isTriggerbotting)
                input[keyEnum.shoot] = 1;

            const enemies = this.game.players.list.filter(player => {
                return (
                    !player.isYou &&
                    (!this.me.team || player.team !== this.me.team) //&&
                    
                )
            });

            // enemies.sort((enemy1, enemy2) => {

            // });

            for (const enemy of enemies) {
                if (enemy.health <= 0 || !enemy.active || !enemy.canBSeen) continue;
                
                const pos = new this.three.Vector3(enemy.x, enemy.y, enemy.z);

                if (!this.containsPoint(pos)) continue;

                const headScreenPos = this.world2Screen(pos.clone(), width, height, enemy.height);
                
                const screenCenter = {
                    x: width / 2,
                    y: height / 2
                }
                
                const delta = {
                    x: screenCenter.x - headScreenPos.x,
                    y: screenCenter.y - headScreenPos.y
                }
                
                const distanceToCenter = Math.hypot(delta.x, delta.y);
                
                const dir = {
                    x: ((this.calcXRotation(this.me.x, this.me.y, this.me.z, pos.x, pos.y - enemy.crouchVal * 3 + this.me.crouchVal * 3 + 0.95, pos.z)) - 0.3 * this.me.recoilAnimY) * 1000,
                    y: (this.getDirection2D(this.me.z, this.me.x, pos.z, pos.x)) * 1000
                }

                this.controls.target = {
                    xD: dir.x / 1000,
                    yD: dir.y / 1000
                }

                if (this.settings.fovAimbot) {
                    if (distanceToCenter > (this.settings.aimbotFov / this.scale)) {
                        this.controls.update(15 + 20 / (this.settings.smoothSpeed * (1 + Math.log(distanceToCenter)))); // fine tuned these numbers for 3 hours
                        
                        break;
                    };
                }
                
                this.controls.update(500);
                
                // triggerbot

                if (!this.settings.triggerbot ||
                    distanceToCenter > this.settings.triggerbotFov ||
                    !this.me.weapon.noAim && this.me.aimVal !== 0
                ) {
                    this.state.isTriggerbotting = false;

                    break;
                }

                if (this.state.canDelayShot) {
                    this.state.canDelayShot = false;

                    this.state.delayedShots.push(performance.now());
                    
                    setTimeout(() => (this.state.canDelayShot = true), 0.95 * this.me.weapon.rate * (this.me.isKranked ? this.game.mode.bonuses.firerate : 1));
                }

                
                break;
            }
        }

        return input;
    },

    render() {            
        const width = innerWidth / this.scale;
        const height = innerHeight / this.scale;

        // aimbot fov circle

        // this.ctx.strokeStyle = "#fff";
        // this.ctx.beginPath()
        // this.ctx.arc(width / 2, height / 2, this.settings.aimbotFov / this.scale, 0, 2 * Math.PI);
        // this.ctx.stroke();

        // esp + nametag

        const enemies = this.game.players.list.filter(player => (!player.isYou && (!this.me.team || player.team !== this.me.team)));

        for (const enemy of enemies) {
            const pos = new this.three.Vector3(enemy.x, enemy.y, enemy.z);
            
            if (enemy.health <= 0 || !enemy.active) continue;
            if (!this.containsPoint(pos)) continue;
    
            const top = this.world2Screen(pos.clone(), width, height, enemy.height + 1);
            const bottom = this.world2Screen(pos.clone(), width, height);

            const rectHeight = Math.round(bottom.y - top.y);
            const rectWidth = Math.round(rectHeight * 0.65);

            this.ctx.lineWidth = Math.min(1 + rectWidth / 30, 2);
            this.ctx.strokeStyle = "#f00";

            this.ctx.strokeRect(Math.round(top.x - rectWidth / 2), Math.round(top.y), Math.round(rectWidth), Math.round(rectHeight));

            if (enemy.canBSeen) continue;

            this.ctx.font = "Arial 24px";
            this.ctx.textAlign = "center";
            this.ctx.fillStyle = "#fff";

            let nametagText = enemy.alias;
            
            if (enemy.clan) nametagText += ` [${enemy.clan}]`;

            this.ctx.fillText(nametagText, Math.round(top.x), Math.round(top.y) - 5);
        }
    }
}, {
    world2Screen(pos, width, height, offsetY = 0) {
        pos.y += offsetY;

        pos.project(this.renderer.camera);

        pos.x = (pos.x + 1) / 2;
        pos.y = (-pos.y + 1) / 2;

        pos.x *= width;
        pos.y *= height;

        return pos;
    },

    containsPoint(point) {
        const { planes } = this.renderer.frustum;

        for (let i = 0; i < 6; i++)
            if (planes[i].distanceToPoint(point) < 0)
                return false;

        return true;
    },

    getDirection2D(x1, y1, x2, y2) {
        return Math.atan2(y1 - y2, x1 - x2);
    },

    getDistance3D(x1, y1, z1, x2, y2, z2) {
        const deltaX = x1 - x2;
        const deltaY = y1 - y2;
        const deltaZ = z1 - z2;
        
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);
    },

    calcXRotation(x1, y1, z1, x2, y2, z2) {
        const height = Math.abs(y1 - y2);
        const distance = this.getDistance3D(x1, y1, z1, x2, y2, z2);
        
        return Math.asin(height / distance) * (y1 > y2 ? -1 : 1);
    }
});
